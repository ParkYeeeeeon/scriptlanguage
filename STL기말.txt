+#include <iostream>  
 2 +#include <string>  
 3 +#include <vector>  
 4 +#include <fstream>  
 5 +#include <algorithm>  
 6 +#include <iterator>  
 7 +#include <map>  
 8 +#include <functional>  
 9 +using namespace std;  
 10 +  
 11 +//----------------------------------------------------------------------------  
 12 +int main()  
 13 +//----------------------------------------------------------------------------  
 14 +{  
 15 +   //----------------------------------------------------------------------------  
 16 +   // 파일의 내용을 다음과 같이 단어(string) 단위로 vector v에 읽어 왔다.  
 17 +   //  
 18 +   // 이 문제에서 단어는 원본 파일에서 공백으로 분리된 문자집합을 말한다.  
 19 +   //----------------------------------------------------------------------------  
 20 +   ifstream ifs( "80일간의 세계일주.txt" );  
 21 +  
 22 +   vector<string> v( { istream_iterator<string>( ifs ), istream_iterator<string>() } );  
 23 +   ifs.close();  
 24 +  
 25 +   cout << "---------------------" << endl;  
 26 +   cout << "STL 기말시험입니다." << endl;  
 27 +   cout << "---------------------" << endl;  
 28 +  
 29 +   cout << endl;  
 30 +   cout << "모두 " << v.size() << "개의 단어를 읽었습니다." << endl;  
 31 +  
 32 +   // 여기까지 실행이 되는 지 확인한 후 문제를 시작하도락 하자.  
 33 +  
 34 +   // 파일을 처음부터 다시 읽지 않도록 한다.  
 35 +   // vector<string> v 를 이용하여 순서대로 문제를 해결하자.  
 36 +  
 37 +   // [문제 1] 소설에 사용된 영문자의 출현 빈도를 세어 출력하는 프로그램을 작성하라.  
 38 +   // 문제에서 영문자란 공백을 제외한 1byte 아스키 문자를 말한다.  
 39 +   // 결과 화면을 참고하라.  
 40 +   //  
 41 +   // (도움말) 컨테이너 map을 사용한다.  
 42 +   // 연관 배열로 사용할 수 있는 map의 기능을 이용한다.  
 43 +  
 44 +   map<unsigned char, int> m1;  
 45 +  
 46 +   for ( auto iter = v.begin(); iter != v.end(); ++iter ) {  
 47 +      for ( auto iter2 = iter->begin(); iter2 != iter->end(); ++iter2 ) {  
 48 +         m1[*iter2]++;  
 49 +      }  
 50 +   }  
 51 +  
 52 +   cout << endl << endl;  
 53 +   cout << "[문제 1]의 결과" << endl;  
 54 +   for ( auto d : m1 )  
 55 +      cout << d.first << " --> " << d.second << endl;  
 56 +  
 57 +   // [문제 2] 문제 1의 결과를 출현 빈도가 높은 것부터 출력하라.  
 58 +   // 결과 화면을 참고하라.  
 59 +   // (도움말) 컨테이너를 하나 더 생성하라.  
 60 +   // 결과 화면을 관찰하라.  
 61 +   map <int, unsigned char, std::greater<int>> m2;  
 62 +  
 63 +   for ( auto d : m1 ) {  
 64 +      m2.insert( pair<int, unsigned char>( d.second, d.first ) );  
 65 +   }  
 66 +  
 67 +  
 68 +   cout << endl << endl;  
 69 +   cout << "[문제 2]의 결과" << endl;  
 70 +   for ( auto d : m2 )  
 71 +      cout << d.first << " --> " << d.second << endl;  
 72 +  
 73 +  
 74 +   // [문제 3] 벡터 v를 단어의 길이가 긴 순서를 기준으로 정렬하라.  
 75 +   // 길이가 가장 긴 단어가 제일 앞에 오도록 하라.  
 76 +   // 결과 화면을 참고하라.  
 77 +   // (도움말) lambda를 사용한다.  
 78 +  
 79 +   sort( v.begin(), v.end(), []( const string& a, const string& b ) {  
 80 +      return a.length() > b.length();  
 81 +   } );  
 82 +  
 83 +   cout << endl << endl;  
 84 +   cout << "[문제 3]의 결과 - 10000번째에서 20개" << endl;  
 85 +   for ( int i = 10000; i < 10020; ++i )  
 86 +      cout << v[i] << endl;  
 87 +  
 88 +  
 89 +   // [문제 4] 문제 3의 출력을 관찰한 결과 중복된 단어가 있음을 알았다.  
 90 +   // 모든 단어가 한 번 씩만 존재하도록 벡터의 내용을 수정한 후  
 91 +   // 문제 3과 같이 단어 길이 순으로 정렬 하라.  
 92 +   // 결과 화면을 참고하라.  
 93 +   // (도움말) 알고리즘 함수 unique를 사용한다.  
 94 +  
 95 +     
 96 +   sort( v.begin(), v.end() );  
 97 +  
 98 +   v.erase( unique( v.begin(), v.end() ), v.end() );  
 99 +  
 100 +   sort( v.begin(), v.end(), []( const string& a, const string& b ) {  
 101 +      return a.length() > b.length();  
 102 +   } );  
 103 +  
 104 +   cout << endl << endl;  
 105 +   cout << "[문제 4]의 결과" << endl;  
 106 +   cout << "중복된 단어를 지운 후 벡터의 원소수 : " << v.size() << endl;  
 107 +  
 108 +   cout << "10000번째부터 10개의 단어" << endl;  
 109 +   for ( int i = 10000; i < 1010; ++i )  
 110 +      cout << v[i] << endl;  
 111 +   cout << endl << endl;  
 112 +   cout << "제일 뒤에서 부터 20개의 단어" << endl;  
 113 +   for ( auto i = v.rbegin(); i <= v.rbegin() + 20; ++i )  
 114 +      cout << *i << endl;  
 115 +  
 116 +   // [문제 5] 길이가 7인 단어가 몇 개나 있는 지 출력하라.  
 117 +  
 118 +   int n;  
 119 +   n = 0;  
 120 +   for ( auto d : v ) {  
 121 +      if ( d.length() == 7 ) {  
 122 +         ++n;  
 123 +      }  
 124 +   }  
 125 +  
 126 +   cout << endl << endl;  
 127 +   cout << "[문제 5]의 결과 " << endl;  
 128 +   cout << "길이가 7인 단어의 수 : " << n << endl;  
 129 +  
 130 +   // [문제 6] 길이가 7인 단어가 생각보다 많이 있다.  
 131 +   // 길이가 7인 단어를 따로 떼어 vector<string> v2에 옮겨 담아라.  
 132 +   // v에는 길이가 7인 단어가 존재하지 않아야 한다.  
 133 +   // (도움말) partition_copy() 를 사용한다.  
 134 +  
 135 +   vector<string> v2;  
 136 +   v2.reserve( n+1 );  
 137 +  
 138 +   partition_copy( v.begin(), v.end(), v2.begin(), v.begin(), []( string a )->bool{   
 139 +         return a.length() == 7;  
 140 +   } );  
 141 +  
 142 +  
 143 +   cout << endl << endl;  
 144 +   cout << "[문제 6]의 결과 " << endl;  
 145 +   cout << "길이가 7인 단어의 수 " << v2.size() << endl;  
 146 +  
 147 +   cout << "앞에서 부터 20개 출력" << endl;  
 148 +   for ( int i = 0; i < 20; ++i )  
 149 +      cout << v2[i] << endl;  
 150 +   cout << endl;  
 151 +  
 152 +  
 153 +  
 154 +}  